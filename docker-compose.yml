version: "3.7"

volumes:
  auth-hooks-node-modules:
  gateway-node-modules:
  web-node-modules:
  pg-data:
  prokairos-node-modules:

services:
  #
  # App Services
  #
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: dev
    ports:
      - ${HOST_WEB_PORT}:3000
    environment:
      GRAPHQL_ENDPOINT: http://gateway:3000/graphql
      ORY_KRATOS_PUBLIC_URL: http://ory-kratos:3000
      ORY_KRATOS_BROWSER_URL: http://localhost:${HOST_ORY_KRATOS_PUBLIC_PORT}
    volumes:
      - ./apps/web:/home/node/app
      - web-node-modules:/home/node/app/node_modules
    depends_on:
      - gateway

  auth-hooks:
    build:
      context: ./services/auth-hooks
      dockerfile: Dockerfile
      target: dev
    ports:
      - ${HOST_AUTH_HOOKS_PORT}:3000
    environment:
      AUTH_HOOKS_SECRET: ${AUTH_HOOKS_SECRET}
      GATEWAY_GRAPHQL_URL: http://gateway:3000/graphql
      ORY_KRATOS_ADMIN_URL: http://ory-kratos:3001
    volumes:
      - ./services/auth-hooks:/home/node/app
      - auth-hooks-node-modules:/home/node/app/node_modules
    depends_on:
      - ory-kratos

  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
      target: dev
    ports:
      - ${HOST_GATEWAY_PORT}:3000
    environment:
      AUTH_HOOKS_SECRET: ${AUTH_HOOKS_SECRET}
      DATABASE_URL: postgres://letschurch:password@postgres:5432/letschurch
      ORY_KRATOS_ADMIN_URL: http://ory-kratos:3001
      ORY_KRATOS_PUBLIC_URL: http://ory-kratos:3000
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      TEMPORAL_CLIENT_URL: http://proskairos-client:3000
    volumes:
      - ./services/gateway:/home/node/app
      - gateway-node-modules:/home/node/app/node_modules
    depends_on:
      - ory-kratos
      - proskairos-client

  proskairos-client:
    build:
      context: ./services/proskairos
      dockerfile: Dockerfile
      target: dev
    ports:
      - ${HOST_PROSKAIROS_CLIENT_PORT}:3000
    environment:
      TEMPORAL_ADDRESS: temporal:7233
    volumes:
      - ./services/proskairos:/home/node/app
      - prokairos-node-modules:/home/node/app/node_modules
    command: npm run dev:client
    restart: unless-stopped
    depends_on:
      - proskairos-worker

  proskairos-worker:
    build:
      context: ./services/proskairos
      dockerfile: Dockerfile
      target: dev
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      S3_REGION: ${S3_REGION}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
    volumes:
      - ./services/proskairos:/home/node/app
      - prokairos-node-modules:/home/node/app/node_modules
    command: npm run dev:worker
    restart: unless-stopped
    depends_on:
      - temporal

  #
  # Vendor Services
  #
  ory-kratos:
    image: oryd/kratos:v0.10.1
    ports:
      - ${HOST_ORY_KRATOS_PUBLIC_PORT}:3000 # public
      - ${HOST_ORY_KRATOS_ADMIN_PORT}:3001 # admin
    restart: unless-stopped
    environment:
      DSN: postgres://ory_kratos:password@postgres:5432/ory_kratos?sslmode=disable&max_conns=20&max_idle_conns=4
      SERVE_PUBLIC_PORT: 3000
      SERVE_PUBLIC_BASE_URL: http://localhost:${HOST_ORY_KRATOS_PUBLIC_PORT}/
      SERVE_ADMIN_PORT: 3001
      SERVE_ADMIN_BASE_URL: http://ory-kratos:${HOST_ORY_KRATOS_ADMIN_PORT}/

      SELFSERVICE_DEFAULT_BROWSER_RETURN_URL: http://localhost:${HOST_WEB_PORT}/
      SELFSERVICE_ALLOWED_RETURN_URLS_0: http://localhost:${HOST_WEB_PORT}/
      SELFSERVICE_FLOWS_ERROR_UI_URL: http://localhost:${HOST_WEB_PORT}/auth/error
      SELFSERVICE_FLOWS_SETTINGS_UI_URL: http://localhost:${HOST_WEB_PORT}/auth/settings
      SELFSERVICE_FLOWS_RECOVERY_UI_URL: http://localhost:${HOST_WEB_PORT}/auth/recover
      SELFSERVICE_FLOWS_REGISTRATION_UI_URL: http://localhost:${HOST_WEB_PORT}/auth/register
      SELFSERVICE_FLOWS_REGISTRATION_AFTER_HOOKS_0_CONFIG_URL: http://auth-hooks:3000/after/registration
      SELFSERVICE_FLOWS_VERIFICATION_UI_URL: http://localhost:${HOST_WEB_PORT}/auth/verify
      SELFSERVICE_FLOWS_LOGIN_UI_URL: http://localhost:${HOST_WEB_PORT}/auth/login
      SELFSERVICE_FLOWS_LOGOUT_UI_URL: http://localhost:${HOST_WEB_PORT}/auth/logout
      SELFSERVICE_FLOWS_LOGOUT_AFTER_DEFAULT_BROWSER_RETURN_URL: http://127.0.0.1:${HOST_WEB_PORT}/auth/login
      COURIER_SMTP_CONNECTION_URI: smtps://mailhog_stunnel:4650/?skip_ssl_verify=true
    command: serve -c /etc/ory-kratos/config.yml --dev --watch-courier
    volumes:
      - ./etc/ory-kratos:/etc/ory-kratos

  temporal:
    image: temporalio/auto-setup:1.18.3
    environment:
      # See auto-setup.sh: https://github.com/temporalio/docker-builds/blob/a442b94edbe10bb49e2f0fc00c3154cdf0590be5/docker/auto-setup.sh
      SKIP_DB_CREATE: true # Database is already created via init script
      DB: postgresql # Database vendor
      DB_PORT: 5432 # Database port
      POSTGRES_SEEDS: postgres # Databae server
      POSTGRES_USER: temporal # Database user
      POSTGRES_PWD: password # Database user password
      DBNAME: temporal # Database on server
      VISIBILITY_DBNAME: temporal_visibility
      DYNAMIC_CONFIG_FILE_PATH: config/dynamicconfig/development-sql.yml
      ENABLE_ES: true
      ES_SEEDS: elasticsearch
      ES_VERSION: v7 # Even though we run v8, temporal only has configuration for v7
    ports:
      - ${HOST_TEMPORAL_PORT}:7233
    volumes:
      - ./etc/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    depends_on:
      - postgres
      - elasticsearch

  temporal-admin-tools:
    image: temporalio/admin-tools:1.18.3
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    stdin_open: true
    tty: true
    depends_on:
      - temporal

  temporal-ui:
    image: temporalio/ui:2.8.0
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CORS_ORIGINS: http://localhost:3000
    ports:
      - ${HOST_TEMPORAL_UI_PORT}:8080
    depends_on:
      - temporal

  #
  # Service Dependencies
  #
  postgres:
    image: postgres:14.5-alpine
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE}
    ports:
      - '${HOST_PG_PORT}:5432'
    volumes:
      - ./etc/postgres-init:/docker-entrypoint-initdb.d
      - pg-data:/var/lib/postgresql/data
    command:
      [
        'postgres',
        '-c',
        'log_statement=all',
        '-c',
        'log_min_duration_statement=0',
      ]

  elasticsearch:
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    image: elasticsearch:8.4.3
    ports:
      - ${HOST_ES_PORT}:9200

  mailhog:
    image: mailhog/mailhog
    restart: always
    ports:
      - ${HOST_MAILHOG_SMTP_PORT}:1025 # smtp server
      - ${HOST_MAILHOG_WEB_PORT}:8025 # web ui
  mailhog_stunnel:
    image: dweomer/stunnel
    restart: always
    environment:
      - STUNNEL_SERVICE=smtps
      - STUNNEL_ACCEPT=4650
      - STUNNEL_CONNECT=mailhog:1025
    ports:
      - ${HOST_MAILHOG_SMTPS_PORT}:4650 # smtp tls
