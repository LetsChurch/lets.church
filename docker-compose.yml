version: "3.7"

volumes:
  auth-hooks-node-modules:
  background-worker-node-modules:
  es-data:
  gateway-node-modules:
  pg-data:
  process-upload-worker-node-modules:
  web-node-modules:

x-s3-env: &s3-env
  S3_INGEST_REGION: ${S3_INGEST_REGION}
  S3_INGEST_ENDPOINT: ${S3_INGEST_ENDPOINT}
  S3_INGEST_BUCKET: ${S3_INGEST_BUCKET}
  S3_INGEST_ACCESS_KEY_ID: ${S3_INGEST_ACCESS_KEY_ID}
  S3_INGEST_SECRET_ACCESS_KEY: ${S3_INGEST_SECRET_ACCESS_KEY}
  S3_SERVE_REGION: ${S3_SERVE_REGION}
  S3_SERVE_ENDPOINT: ${S3_SERVE_ENDPOINT}
  S3_SERVE_BUCKET: ${S3_SERVE_BUCKET}
  S3_SERVE_ACCESS_KEY_ID: ${S3_SERVE_ACCESS_KEY_ID}
  S3_SERVE_SECRET_ACCESS_KEY: ${S3_SERVE_SECRET_ACCESS_KEY}

services:
  #
  # App Services
  #
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: dev
    ports:
      - ${HOST_WEB_PORT}:3000
    environment:
      GRAPHQL_URL: http://gateway:3000/graphql
      VITE_GRAPHQL_URL: ${HOST_GATEWAY_URL}/graphql
    volumes:
      - ./apps/web:/home/node/app
      - web-node-modules:/home/node/app/node_modules
    command: npm run dev
    depends_on:
      - gateway

  gateway:
    build:
      context: ./services/gateway
      dockerfile: gateway.Dockerfile
      target: dev
    ports:
      - ${HOST_GATEWAY_PORT}:3000
    environment:
      DATABASE_URL: postgres://letschurch:password@postgres:5432/letschurch
      ELASTICSEARCH_URL: http://elasticsearch:9200
      EXTERNAL_HOOKS_HOST: ${EXTERNAL_HOOKS_HOST}
      JWT_SECRET: ${JWT_SECRET}
      TEMPORAL_ADDRESS: temporal:7233
      ZXCVBN_MINIMUM_SCORE: ${ZXCVBN_MINIMUM_SCORE}
      <<: *s3-env
    volumes:
      - ./services/gateway:/home/node/app
      - gateway-node-modules:/home/node/app/node_modules
    depends_on:
      - temporal
  
  process-upload-worker:
    build:
      context: ./services/gateway
      dockerfile: process-upload-worker.Dockerfile
      target: dev
    environment:
      DATABASE_URL: postgres://letschurch:password@postgres:5432/letschurch
      TEMPORAL_ADDRESS: temporal:7233
      <<: *s3-env
    volumes:
      - ./services/gateway:/home/node/app
      - process-upload-worker-node-modules:/home/node/app/node_modules
    command: npm run dev:process-upload-worker

  background-worker:
    build:
      context: ./services/gateway
      dockerfile: background-worker.Dockerfile
      target: dev
    environment:
      DATABASE_URL: postgres://letschurch:password@postgres:5432/letschurch
      ELASTICSEARCH_URL: http://elasticsearch:9200
      EXTERNAL_HOOKS_HOST: ${EXTERNAL_HOOKS_HOST}
      JWT_SECRET: ${JWT_SECRET}
      TEMPORAL_ADDRESS: temporal:7233
      <<: *s3-env
      SMTP_URL: smtp://mailhog:1025?pool=true
    volumes:
      - ./services/gateway:/home/node/app
      - background-worker-node-modules:/home/node/app/node_modules
    command: npm run dev:background-worker

  #
  # Vendor Services
  #
  temporal:
    image: temporalio/auto-setup:1.19.0.0
    environment:
      # See auto-setup.sh: https://github.com/temporalio/docker-builds/blob/a442b94edbe10bb49e2f0fc00c3154cdf0590be5/docker/auto-setup.sh
      SKIP_DB_CREATE: true # Database is already created via init script
      DB: postgresql # Database vendor
      DB_PORT: 5432 # Database port
      POSTGRES_SEEDS: postgres # Databae server
      POSTGRES_USER: temporal # Database user
      POSTGRES_PWD: password # Database user password
      DBNAME: temporal # Database on server
      VISIBILITY_DBNAME: temporal_visibility
      DYNAMIC_CONFIG_FILE_PATH: config/dynamicconfig/development-sql.yml
      ENABLE_ES: true
      ES_SEEDS: elasticsearch
      ES_VERSION: v7 # Even though we run v8, temporal only has configuration for v7
    ports:
      - ${HOST_TEMPORAL_PORT}:7233
    volumes:
      - ./etc/temporal/dynamicconfig:/etc/temporal/config/dynamicconfig
    depends_on:
      - postgres
      - elasticsearch

  temporal-admin-tools:
    image: temporalio/admin-tools:1.19.0.0
    environment:
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    stdin_open: true
    tty: true
    depends_on:
      - temporal

  temporal-ui:
    image: temporalio/ui:2.9.0
    environment:
      TEMPORAL_ADDRESS: temporal:7233
      TEMPORAL_CORS_ORIGINS: http://localhost:3000
    ports:
      - ${HOST_TEMPORAL_UI_PORT}:8080
    depends_on:
      - temporal

  #
  # Service Dependencies
  #
  postgres:
    image: postgres:14.6-alpine
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE}
    ports:
      - '${HOST_PG_PORT}:5432'
    volumes:
      - ./etc/postgres-init:/docker-entrypoint-initdb.d
      - pg-data:/var/lib/postgresql/data
    command:
      [
        'postgres',
        '-c',
        'log_statement=all',
        '-c',
        'log_min_duration_statement=0',
      ]

  elasticsearch:
    image: elasticsearch:8.5.2
    environment:
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
      - xpack.security.enabled=false
    ports:
      - ${HOST_ES_PORT}:9200
    volumes:
      - es-data:/usr/share/elasticsearch/data

  #
  # Development
  #
  kibana:
    image: kibana:8.5.2
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - ${HOST_KIBANA_PORT}:5601
  mailhog:
    image: mailhog/mailhog
    restart: always
    ports:
      - ${HOST_MAILHOG_SMTP_PORT}:1025 # smtp server
      - ${HOST_MAILHOG_WEB_PORT}:8025 # web ui
