variables:
  GIT_LFS_SKIP_SMUDGE: "1"

stages:
  - setup
  - check
  - test
  - build
  - deploy
  - notify

.setup:
  npmci: nix-shell $CI_PROJECT_DIR/shell.nix --run "npm ci --cache $CI_PROJECT_DIR/.npm --prefer-offline"
  npmcheck: nix-shell $CI_PROJECT_DIR/shell.nix --run "npm run check"

default:
  image: nixos/nix:2.19.2

#   ____ _   _ _____ ____ _  __
#  / ___| | | | ____/ ___| |/ /
# | |   | |_| |  _|| |   | ' /
# | |___|  _  | |__| |___| . \
#  \____|_| |_|_____\____|_|\_\

check-gateway:
  stage: check
  script:
    - cd $CI_PROJECT_DIR/services/gateway
    - !reference [.setup, npmci]
    - !reference [.setup, npmcheck]
  cache:
    key:
      files:
        - $CI_PROJECT_DIR/services/gateway/package-lock.json
    paths:
      - $CI_PROJECT_DIR/.npm

check-web:
  stage: check
  script:
    - cd $CI_PROJECT_DIR/apps/web
    - !reference [.setup, npmci]
    - !reference [.setup, npmcheck]
  cache:
    key:
      files:
        - $CI_PROJECT_DIR/apps/web/package-lock.json
    paths:
      - $CI_PROJECT_DIR/.npm

check-web-next:
  stage: check
  script:
    - cd $CI_PROJECT_DIR/apps/web-next
    - !reference [.setup, npmci]
    - !reference [.setup, npmcheck]
  cache:
    key:
      files:
        - $CI_PROJECT_DIR/apps/web-next/package-lock.json
    paths:
      - $CI_PROJECT_DIR/.npm

check-scripts:
  stage: check
  script:
    - cd $CI_PROJECT_DIR/scripts
    - !reference [.setup, npmci]
    - !reference [.setup, npmcheck]
  cache:
    key:
      files:
        - $CI_PROJECT_DIR/scripts/package-lock.json
    paths:
      - $CI_PROJECT_DIR/.npm

test-gateway:
  stage: check
  script:
    - cd services/gateway
    - !reference [.setup, npmci]
    - !reference [.setup, npmcheck]
  cache: !reference [check-gateway, cache]

#  ____  _   _ ___ _     ____
# | __ )| | | |_ _| |   |  _ \
# |  _ \| | | || || |   | | | |
# | |_) | |_| || || |___| |_| |
# |____/ \___/|___|_____|____/

.build-common: &build-common
  image: docker:24.0.1
  services:
    - docker:24.0.1-dind
  stage: build
  only:
    - kyrios
  before_script:
    - apk add --no-cache curl
    - curl https://depot.dev/install-cli.sh | DEPOT_INSTALL_DIR=/usr/local/bin sh
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build-gateway:
  <<: *build-common
  script:
    - cd services/gateway
    - depot build --target server -t registry.gitlab.com/letschurch/lets.church/gateway:${CI_COMMIT_SHORT_SHA} . --push

build-background-worker:
  <<: *build-common
  script:
    - cd services/gateway
    - depot build --target background-worker -t registry.gitlab.com/letschurch/lets.church/background-worker:${CI_COMMIT_SHORT_SHA} . --push

build-probe-worker:
  <<: *build-common
  script:
    - cd services/gateway
    - depot build --target probe-worker -t registry.gitlab.com/letschurch/lets.church/probe-worker:${CI_COMMIT_SHORT_SHA} . --push

build-import-worker:
  <<: *build-common
  script:
    - cd services/gateway
    - depot build --target import-worker -t registry.gitlab.com/letschurch/lets.church/import-worker:${CI_COMMIT_SHORT_SHA} . --push

build-transcode-worker:
  <<: *build-common
  script:
    - cd services/gateway
    - depot build --target transcode-worker -t registry.gitlab.com/letschurch/lets.church/transcode-worker:${CI_COMMIT_SHORT_SHA} . --push

build-transcribe-worker:
  <<: *build-common
  script:
    - cd services/gateway
    - depot build --target transcribe-worker --build-arg WHISPER_MODEL=large-v2 -t registry.gitlab.com/letschurch/lets.church/transcribe-worker:${CI_COMMIT_SHORT_SHA} . --push

build-web:
  <<: *build-common
  script:
    - cd apps/web
    - depot build -t registry.gitlab.com/letschurch/lets.church/web:${CI_COMMIT_SHORT_SHA} . --push

build-web-next:
  <<: *build-common
  script:
    - cd apps/web-next
    - depot build -t registry.gitlab.com/letschurch/lets.church/web-next:${CI_COMMIT_SHORT_SHA} . --push

#  ____             _
# |  _ \  ___ _ __ | | ___  _   _
# | | | |/ _ \ '_ \| |/ _ \| | | |
# | |_| |  __/ |_) | | (_) | |_| |
# |____/ \___| .__/|_|\___/ \__, |
#            |_|            |___/

deploy-k8s:
  stage: deploy
  only:
    - kyrios
  script:
    - nix-shell shell.nix --run "transcrypt -F -y -c $TRANSCRYPT_CIPHER -p $TRANSCRYPT_PASSWORD"
    - cd infra/k8s/prod
    - nix-shell $CI_PROJECT_DIR/shell.nix --run "just deploy-set-images prod $CI_COMMIT_SHORT_SHA"
    - nix-shell $CI_PROJECT_DIR/shell.nix --run 'kubectl apply -k .'
