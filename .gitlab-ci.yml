variables:
  GIT_LFS_SKIP_SMUDGE: "1"

stages:
  - setup
  - check
  - test
  - build
  - deploy

cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .npm/

.setup:
  activate_hermit: source ./bin/activate-hermit
  npmci: npm ci --cache $CI_PROJECT_DIR/.npm --prefer-offline
  docker_login: docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

default:
  before_script:
    - !reference [.setup, activate_hermit]

#  ____  _____ _____ _   _ ____
# / ___|| ____|_   _| | | |  _ \
# \___ \|  _|   | | | | | | |_) |
#  ___) | |___  | | | |_| |  __/
# |____/|_____| |_|  \___/|_|

npmci:
  stage: setup
  script:
    - cd $CI_PROJECT_DIR/services/gateway
    - !reference [.setup, npmci]
    - cd $CI_PROJECT_DIR/apps/web
    - !reference [.setup, npmci]
    - cd $CI_PROJECT_DIR/scripts
    - !reference [.setup, npmci]

#   ____ _   _ _____ ____ _  __
#  / ___| | | | ____/ ___| |/ /
# | |   | |_| |  _|| |   | ' /
# | |___|  _  | |__| |___| . \
#  \____|_| |_|_____\____|_|\_\

check-gateway:
  stage: check
  script:
    - cd $CI_PROJECT_DIR/services/gateway
    - !reference [.setup, npmci]
    - npm run check

check-web:
  stage: check
  script:
    - cd $CI_PROJECT_DIR/apps/web
    - !reference [.setup, npmci]
    - npm run check

check-scripts:
  stage: check
  script:
    - cd $CI_PROJECT_DIR/scripts
    - !reference [.setup, npmci]
    - npm run check

#  _____ _____ ____ _____
# |_   _| ____/ ___|_   _|
#   | | |  _| \___ \ | |
#   | | | |___ ___) || |
#   |_| |_____|____/ |_|

test-gateway:
  stage: test
  script:
    - cd services/gateway
    - !reference [.setup, npmci]
    - npm run test

#  ____  _   _ ___ _     ____
# | __ )| | | |_ _| |   |  _ \
# |  _ \| | | || || |   | | | |
# | |_) | |_| || || |___| |_| |
# |____/ \___/|___|_____|____/

.build-common: &build-common
  image: docker:20.10.23
  stage: build
  services:
    - docker:20.10.23-dind
  before_script:
    - docker info
    - !reference [.setup, docker_login]

build-base:
  <<: *build-common
  script:
    - cd services/gateway
    - docker build --target base -t registry.gitlab.com/letschurch/lets.church/base:${CI_COMMIT_SHORT_SHA} -t registry.gitlab.com/letschurch/lets.church/base:latest --cache-from registry.gitlab.com/letschurch/lets.church/base:latest .
    - docker push registry.gitlab.com/letschurch/lets.church/base:${CI_COMMIT_SHORT_SHA}
    - docker push registry.gitlab.com/letschurch/lets.church/base:latest

build-server:
  <<: *build-common
  needs:
    - build-base
  script:
    - cd services/gateway
    - docker build --target server -t registry.gitlab.com/letschurch/lets.church/gateway:${CI_COMMIT_SHORT_SHA} -t registry.gitlab.com/letschurch/lets.church/gateway:latest --cache-from registry.gitlab.com/letschurch/lets.church/base:latest --cache-from registry.gitlab.com/letschurch/lets.church/server:latest .
    - docker push registry.gitlab.com/letschurch/lets.church/gateway:${CI_COMMIT_SHORT_SHA}
    - docker push registry.gitlab.com/letschurch/lets.church/gateway:latest

build-background-worker:
  <<: *build-common
  needs:
    - build-base
  script:
    - cd services/gateway
    - docker build --target background-worker -t registry.gitlab.com/letschurch/lets.church/background-worker:${CI_COMMIT_SHORT_SHA} -t registry.gitlab.com/letschurch/lets.church/background-worker:latest --cache-from registry.gitlab.com/letschurch/lets.church/base:latest --cache-from registry.gitlab.com/letschurch/lets.church/build-background-worker:latest .
    - docker push registry.gitlab.com/letschurch/lets.church/background-worker:${CI_COMMIT_SHORT_SHA}
    - docker push registry.gitlab.com/letschurch/lets.church/background-worker:latest

build-process-upload-worker:
  <<: *build-common
  needs:
    - build-base
  script:
    - cd services/gateway
    - docker build --target process-upload-worker -t registry.gitlab.com/letschurch/lets.church/process-upload-worker:${CI_COMMIT_SHORT_SHA} -t registry.gitlab.com/letschurch/lets.church/process-upload-worker:latest --cache-from registry.gitlab.com/letschurch/lets.church/base:latest --cache-from registry.gitlab.com/letschurch/lets.church/process-upload-worker:latest .
    - docker push registry.gitlab.com/letschurch/lets.church/process-upload-worker:${CI_COMMIT_SHORT_SHA}
    - docker push registry.gitlab.com/letschurch/lets.church/process-upload-worker:latest

build-web:
  <<: *build-common
  needs:
    - build-base
  script:
    - cd apps/web
    - docker build -t registry.gitlab.com/letschurch/lets.church/web:${CI_COMMIT_SHORT_SHA} -t registry.gitlab.com/letschurch/lets.church/web:latest --cache-from registry.gitlab.com/letschurch/lets.church/base:latest --cache-from registry.gitlab.com/letschurch/lets.church/web:latest .
    - docker push registry.gitlab.com/letschurch/lets.church/web:${CI_COMMIT_SHORT_SHA}
    - docker push registry.gitlab.com/letschurch/lets.church/web:latest

#  ____             _
# |  _ \  ___ _ __ | | ___  _   _ 
# | | | |/ _ \ '_ \| |/ _ \| | | |
# | |_| |  __/ |_) | | (_) | |_| |
# |____/ \___| .__/|_|\___/ \__, |
#            |_|            |___/ 

# deploy-k8s:
#   stage: deploy
#   script:
#     - cd infra/k8s/preview
#     - cp $INIT_SQL init.sql
#     - cp $S3_ENV s3.env
#     - cp $SMTP_ENV smtp.env
#     - just deploy-set-images preview $CI_COMMIT_SHORT_SHA
#     - kubectl apply -k .
