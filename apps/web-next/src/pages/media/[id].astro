---
import humanFormat from 'human-format';
import pluralize from 'pluralize';
import 'video.js/dist/video-js.css';
import '@fontsource-variable/roboto-mono';
import { invariant } from '../../util';
import Layout from '../../layouts/layout.astro';
import { createClient } from '../../util/server/gql';
import { formatDateFull } from '../../util/date';
import {
  mediaPageMetaDataQuery,
  recordViewMutation,
  type MediaPageMetaDataQuery,
  type MediaPageMetaDataQueryVariables,
  type MediaRouteRecordViewMutation,
  type MediaRouteRecordViewMutationVariables,
} from '../../queries/media';
import Avatar from '../../components/avatar';
import Player from '../../components/media/player';
import Transcript from '../../components/media/transcript';

const { id } = Astro.params;
invariant(id, 'id is required');

const client = await createClient(
  Astro.request.headers,
  Astro.cookies.get('lcSession')?.value,
);

const [{ data }] = await Promise.all([
  client.request<MediaPageMetaDataQuery, MediaPageMetaDataQueryVariables>(
    mediaPageMetaDataQuery,
    {
      id,
      seriesId: null, // TODO: seriesId
      commentsFirst: null, // TODO: comments
      commentsAfter: null, // TODO: comments
      commentsLast: null, // TODO: comments
      commentsBefore: null, // TODO: comments
    },
  ),
  client.request<
    MediaRouteRecordViewMutation,
    MediaRouteRecordViewMutationVariables
  >(recordViewMutation, { id }),
] as const);
---

<Layout title={data.title ?? 'Untitled'}>
  <div class="mx-auto mt-5 max-w-7xl">
    <div class="md:grid md:grid-cols-3 md:gap-4">
      <div class="space-y-4 md:col-span-2">
        <Player
          client:only="solid-js"
          id={data.id}
          videoSource={data.mediaSource}
          audioSource={data.audioSource}
          peaksDatUrl={data.peaksDatUrl}
          peaksJsonUrl={data.peaksJsonUrl}
          lengthSeconds={data.lengthSeconds ?? 0}
          fluid
        />
        <h1 class="truncate text-balance text-2xl">{data.title ?? '...'}</h1>
        <div
          class="flex flex-col gap-3 lg:flex-row lg:justify-between lg:overflow-x-auto"
        >
          <div class="flex justify-start gap-3">
            <a
              href={`/channel/${data.channel.slug}`}
              class="relative z-10 inline-flex w-max min-w-0 items-center space-x-2 overflow-hidden whitespace-nowrap"
            >
              <Avatar
                size="sm"
                src={data.channel.avatarUrl}
                alt={`${data.channel.name} icon`}
              />
              <span class="overflow-hidden text-ellipsis text-sm text-gray-500">
                {data.channel.name}
              </span>
            </a>
            <form class="isolate inline-flex rounded-md shadow-sm">
              <input
                type="hidden"
                name="channelId"
                value={data.channel.id ?? ''}
              />
              <button
                >{
                  data.channel.userIsSubscribed ? 'Subscribed' : 'Subscribe'
                }</button
              >
            </form>
          </div>
          <div class="flex gap-3 max-lg:overflow-x-auto">
            {
              data.downloadsEnabled && (data.downloadUrls?.length ?? 0 > 0) ? (
                <div>
                  <button>Download</button>
                </div>
              ) : null
            }
            <div>
              <div>Share</div>
            </div>
            <div>Rate</div>
          </div>
        </div>
        <div class="space-y-2 rounded-md bg-gray-100 p-3">
          <div class="flex items-center gap-3 text-sm">
            <p class="font-medium text-gray-900">
              {humanFormat(data.totalViews ?? 0)}{' '}
              {pluralize('view', data.totalViews ?? 0)}
            </p>
            {
              data.publishedAt ? (
                <time datetime={data.publishedAt} class="text-gray-600">
                  {formatDateFull(new Date(data.publishedAt))}
                </time>
              ) : null
            }
          </div>
          {
            data.description ? (
              <div class="whitespace-pre-line">{data.description}</div>
            ) : null
          }
        </div>
        {
          data.userCommentsEnabled ? (
            <form>
              <input
                type="hidden"
                name="uploadRecordId"
                value={data.id ?? ''}
              />
              <div>comment form</div>
              <p class="font-medium text-gray-900">
                {data.userComments.totalCount} comments
              </p>
              <div>comments</div>
              <div>pagination</div>
            </form>
          ) : (
            <p class="rounded-md bg-gray-100 p-3 text-gray-400">
              Comments are disabled.
            </p>
          )
        }
      </div>
      <div class="space-y-4 md:col-span-1">
        {
          data.series ? (
            <div class="relative flex h-[175px] flex-col overflow-hidden rounded-md bg-gray-50">
              <h3 class="inset-x-0 bg-gray-50 px-4 pb-2 pt-4 text-sm font-semibold text-gray-900">
                {data.series.title}
              </h3>
              <div class="h-full space-y-4 overflow-y-auto p-4">
                series stuff
              </div>
            </div>
          ) : null
        }
        <Transcript client:load transcript={data.transcript ?? []} />
      </div>
    </div>
  </div>
</Layout>
