// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: session.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO app_session (
    app_user_id, updated_at
) VALUES (
    $1, CURRENT_TIMESTAMP
) RETURNING id
`

func (q *Queries) CreateSession(ctx context.Context, userID pgtype.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createSession, userID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteSession = `-- name: DeleteSession :exec
UPDATE app_session SET deleted_at = CURRENT_TIMESTAMP WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getValidSession = `-- name: GetValidSession :many
SELECT s.id, s.app_user_id, s.expires_at, s.created_at, s.updated_at, s.deleted_at, u.id as user_id, u.username as username
FROM app_session s, app_user u
WHERE s.id = $1
AND s.app_user_id = u.id
AND expires_at > CURRENT_TIMESTAMP
AND u.deleted_at IS NULL
AND s.deleted_at IS NULL
LIMIT 1
`

type GetValidSessionRow struct {
	ID        pgtype.UUID
	AppUserID pgtype.UUID
	ExpiresAt pgtype.Timestamp
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	DeletedAt pgtype.Timestamp
	UserID    pgtype.UUID
	Username  pgtype.Text
}

func (q *Queries) GetValidSession(ctx context.Context, id pgtype.UUID) ([]GetValidSessionRow, error) {
	rows, err := q.db.Query(ctx, getValidSession, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetValidSessionRow
	for rows.Next() {
		var i GetValidSessionRow
		if err := rows.Scan(
			&i.ID,
			&i.AppUserID,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
