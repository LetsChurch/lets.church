generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "filteredRelationCount"]
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext, uuidOssp(map: "uuid-ossp")]
}

enum AppUserRole {
  USER
  ADMIN

  @@map("app_user_role")
}

model AppUser {
  id                      String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                   String                   @unique @db.Citext
  username                String                   @unique @db.Citext
  password                String
  fullName                String?                  @db.VarChar(100)
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @updatedAt @map("updated_at")
  deletedAt               DateTime?                @map("deleted_at")
  role                    AppUserRole              @default(USER)
  sessions                AppSession[]
  channelMemberships      ChannelMembership[]
  organizationMemberships OrganizationMembership[]
  createdUploads          UploadRecord[]           @relation("createdUploads")
  finalizedUploads        UploadRecord[]           @relation("finalizedUploads")

  @@map("app_user")
}

model AppSession {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  appUserId String    @map("app_user_id") @db.Uuid
  appUser   AppUser   @relation(fields: [appUserId], references: [id])
  expiresAt DateTime  @default(dbgenerated("(now() + '14 days'::interval)")) @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("app_session")
}

model Organization {
  id           String                           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  slug         String                           @unique @db.Citext
  description  String?
  memberships  OrganizationMembership[]
  associations OrganizationChannelAssociation[]
  createdAt    DateTime                         @default(now()) @map("created_at")
  updatedAt    DateTime                         @updatedAt @map("updated_at")

  @@map("organization")
}

model OrganizationMembership {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("channel_id") @db.Uuid
  appUser        AppUser      @relation(fields: [appUserId], references: [id])
  appUserId      String       @map("app_user_id") @db.Uuid
  isAdmin        Boolean      @default(false) @map("is_admin")
  canEdit        Boolean      @default(false) @map("can_edit")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@id([organizationId, appUserId])
  @@map("organization_membership")
}

model OrganizationChannelAssociation {
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id") @db.Uuid
  channel        Channel      @relation(fields: [channelId], references: [id])
  channelId      String       @map("channel_id") @db.Uuid
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@id([organizationId, channelId])
  @@map("organization_channel_association")
}

model Channel {
  id            String                           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  slug          String                           @unique
  description   String?
  memberships   ChannelMembership[]
  associations  OrganizationChannelAssociation[]
  createdAt     DateTime                         @default(now()) @map("created_at")
  updatedAt     DateTime                         @updatedAt @map("updated_at")
  uploadRecords UploadRecord[]

  @@map("channel")
}

model ChannelMembership {
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String   @map("channel_id") @db.Uuid
  appUser   AppUser  @relation(fields: [appUserId], references: [id], onDelete: Cascade)
  appUserId String   @map("app_user_id") @db.Uuid
  isAdmin   Boolean  @default(false) @map("is_admin")
  canEdit   Boolean  @default(false) @map("can_edit")
  canUpload Boolean  @default(false) @map("can_upload")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([channelId, appUserId])
  @@map("channel_membership")
}

enum UploadLicense {
  STANDARD
  PUBLIC_DOMAIN
  CC_BY
  CC_BY_SA
  CC_BY_NC
  CC_BY_NC_SA
  CC_BY_ND
  CC_BY_NC_ND
  CC0
}

enum UploadVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum UploadVariant {
  VIDEO_4K
  VIDEO_1080P
  VIDEO_720P
  VIDEO_480P
  VIDEO_360P
  AUDIO
}

model UploadRecord {
  id                   String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                String?
  description          String?
  createdBy            AppUser            @relation("createdUploads", fields: [appUserId], references: [id])
  appUserId            String             @map("app_user_id") @db.Uuid
  license              UploadLicense
  channel              Channel            @relation(fields: [channelId], references: [id])
  channelId            String             @map("channel_id") @db.Uuid
  visibility           UploadVisibility
  uploadSizeBytes      BigInt?            @map("upload_size_bytes")
  uploadFinalized      Boolean            @default(false) @map("upload_finalized")
  uploadFinalizedBy    AppUser?           @relation("finalizedUploads", fields: [uploadFinalizedById], references: [id])
  uploadFinalizedById  String?            @map("upload_finalized_by_id") @db.Uuid
  defaultThumbnailPath String?            @map("default_thumbnail_path")
  thumbnailBlurhash    String?            @map("thumbnail_blurhash")
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @updatedAt @map("updated_at")
  publishDate          DateTime?          @map("publish_date")
  deletedAt            DateTime?          @map("deleted_at")
  variants             UploadVariant[]
  ratings              UploadUserRating[]

  @@index([createdAt, id])
  @@map("upload_record")
}

enum Rating {
  LIKE
  DISLIKE
}

model UploadUserRating {
  appUserId      String       @map("app_user_id") @db.Uuid
  uploadRecordId String       @map("upload_id") @db.Uuid
  rating         Rating
  createdAt      DateTime     @default(now()) @map("created_at")
  uploadRecord   UploadRecord @relation(fields: [uploadRecordId], references: [id])

  @@id([appUserId, uploadRecordId])
  @@index([uploadRecordId, rating])
  @@index([appUserId, rating])
}
