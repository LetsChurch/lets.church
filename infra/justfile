default:
  @just --choose

deploy-check-vars:
  #!/usr/bin/env bash

  required_vars=(
    CI_COMMIT_SHORT_SHA
    NAMESPACE
    MEDIA_URL
    API_HOST
    TEMPORAL_POSTGRES_USER_BASE64
    TEMPORAL_POSTGRES_PASSWORD_BASE64
    DATABASE_URL_BASE64
    POSTGRES_USER_BASE64
    POSTGRES_PASSWORD_BASE64
    SMTP_URL_BASE64
  )

  for var in "${required_vars[@]}"; do
    if [ -z "${!var}" ]; then
      echo "Error: $var is not set."
      exit 1
    fi
  done

deploy-set-images env hash:
  #!/usr/bin/env bash
  cd k8s/{{env}}
  kustomize edit set image registry.gitlab.com/letschurch/lets.church/gateway:{{hash}}
  kustomize edit set image registry.gitlab.com/letschurch/lets.church/background-worker:{{hash}}
  kustomize edit set image registry.gitlab.com/letschurch/lets.church/import-worker:{{hash}}
  kustomize edit set image registry.gitlab.com/letschurch/lets.church/transcode-worker:{{hash}}
  kustomize edit set image registry.gitlab.com/letschurch/lets.church/web:{{hash}}
  kustomize edit set image registry.gitlab.com/letschurch/lets.church/web-next:{{hash}}

deploy env: deploy-check-vars
  just deploy-set-images {{env}} $CI_COMMIT_SHORT_SHA
  kubectl apply -k k8s/{{env}}

delete-k8s env: deploy-check-vars
  kustomize build k8s/{{env}} | kubectl delete -f -

# Based on https://gist.github.com/redmcg/60cfff7bca6f32969188008ad4a44c9a
pv-usage *flags:
  #!/usr/bin/env bash

  NODESAPI=/api/v1/nodes

  function getNodes() {
    kubectl get --raw $NODESAPI | jq -r '.items[].metadata.name'
  }

  function getPvcs() {
    jq -s '[flatten | .[].pods[].volume[]? | select(has("pvcRef")) | ''{name: .pvcRef.name, capacityBytes, usedBytes, availableBytes, ''percentageUsed: (.usedBytes / .capacityBytes * 100)}] | sort_by(.name)'
  }

  function column() {
    awk '{ for (i = 1; i <= NF; i++) { d[NR, i] = $i; w[i] = length($i) > w[i] ? length($i) : w[i] } } ''END { for (i = 1; i <= NR; i++) { printf("%-*s", w[1], d[i, 1]); for (j = 2; j <= NF; j++ ) { printf("%*s", w[j] + 1, d[i, j]) } print "" } }'
  }

  function defaultFormat() {
    awk 'BEGIN { print "PVC 1K-blocks Used Available Use%" } ''{$2 = $2/1024; $3 = $3/1024; $4 = $4/1024; $5 = sprintf("%.0f%%",$5); print $0}'
  }

  function humanFormat() {
    awk 'BEGIN { print "PVC Size Used Avail Use%" } ''{$5 = sprintf("%.0f%%",$5); printf("%s ", $1); system(sprintf("numfmt --to=iec %s %s %s | sed '\''N;N;s/\\n/ /g'\'' | tr -d \\\\n", $2, $3, $4)); print " " $5 }'
  }

  function format() {
    jq -r '.[] | "\(.name) \(.capacityBytes) \(.usedBytes) \(.availableBytes) \(.percentageUsed)"' |
      $format | column
  }

  if [ "{{flags}}" == "-r" ]; then
    format=defaultFormat
  else
    format=humanFormat
  fi

  for node in $(getNodes); do
    kubectl get --raw $NODESAPI/$node/proxy/stats/summary
  done | getPvcs | format
